name: BuildAndAnalyze
on: 
  push:
    branches:
      - devel
  workflow_dispatch:

# Global environment variable
env:
  COMPILE_COMMANDS:     "compile_commands.json"
  PVS_LOG:              "PVS-Studio.log"
  PVS_SARIF:            "PVS-Studio.sarif"
  SUPPRESS_FILE_NAME:   "catch2.suppress.json"
  PVS_CONFIG_FILE_NAME: "catch2.pvsconfig"

jobs:
  BuildAndAnalyze:  
    runs-on: ${{matrix.config.os}}
    name: "${{matrix.config.name}}"
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        config:  # Configure os-scecific 
          - {
              name: "Windows",
              os: "windows-latest",
              pvs_analyzer: "C:/Program Files (x86)/PVS-Studio/CompilerCommandsAnalyzer.exe",
              pvs_converter: "C:/Program Files (x86)/PVS-Studio/HtmlGenerator.exe"
            }

          - {
              name: "Linux",
              os: "ubuntu-latest",
              pvs_analyzer: "pvs-studio-analyzer",
              pvs_converter: "plog-converter"
           }

          - {
              name: "macOS",
              os: "macOS-latest",
              pvs_analyzer: "pvs-studio-analyzer",
              pvs_converter: "plog-converter",
          }
    steps:
      - name: Check out
        uses: actions/checkout@v4

#For Windows (Install PVS-Studio and Ninja witch chiocolatey)      
      - name: Choco install tools
        if: runner.os == 'Windows'
        uses: crazy-max/ghaction-chocolatey@v3
        with: 
          args: install pvs-studio ninja
 
      - name: Initialize MSVC development environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
          
#For Linux and macOS  (Install PVS-Studio and Ninja )
      - name: Install PVS-Studio
        if: runner.os != 'Windows'
        run: |
              if [ "$RUNNER_OS" == "Linux" ]; then
                wget -qO- https://cdn.pvs-studio.com/etc/pubkey.txt | \
                sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/viva64.gpg
                sudo wget -O /etc/apt/sources.list.d/viva64.list \
                https://cdn.pvs-studio.com/etc/viva64.list
                sudo apt-get update
                sudo apt-get install pvs-studio ninja-build
              elif [ "$RUNNER_OS" == 'macOS' ]; then
                brew install viva64/pvs-studio/pvs-studio ninja
              else
                echo "The $RUNNER_OS is not supported."
                exit 1
              fi

# Record PVS-Studio license   
      - name: Activate PVS-Studio
        env:
          USER_NAME: ${{ secrets.PVS_USER_NAME }}
          LIC_KEY: ${{ secrets.PVS_LIC_KEY }}
        shell: bash
        run: "\"${{matrix.config.pvs_analyzer}}\" credentials \"${{env.USER_NAME}}\" \"${{env.LIC_KEY}}\""

# Configure cmake cache
      - name: Configure
        run:  cmake -G "Ninja" -DCMAKE_EXPORT_COMPILE_COMMANDS=On -S "${{ github.workspace }}" -B "${{github.workspace}}/build"

# Checking build         
      - name: Build 
        run:  cmake --build "${{github.workspace}}/build" -j

# Run static analysis with PVS-Studio        
      - name: Analyzer with PVS-Studio
        shell: bash
        env:
          SUPPRESS_FILE_PATH:    "${{github.workspace}}/src/${{env.SUPPRESS_FILE_NAME}}"
          PVSCONFIG_PATH:        "${{github.workspace}}/src/${{env.PVS_CONFIG_FILE_NAME}}"
          COMPILE_COMMANDS_PATH: "${{github.workspace}}/build/${{env.COMPILE_COMMANDS}}"

        run: "\"${{matrix.config.pvs_analyzer}}\" analyze -f \"${{env.COMPILE_COMMANDS_PATH}}\" -o \"${{env.PVS_LOG}}\" -s \"${{env.SUPPRESS_FILE_PATH}}\" -R \"${{env.PVSCONFIG_PATH}}\" -r \"${{github.workspace}}\" -j" 
        working-directory: ${{github.workspace}}/build

# Save artifacts        
      - name: Save analysis reports
        if: ${{always()}}
        uses: actions/upload-artifact@v4
        with:
          name: StaticAnalysis_${{matrix.config.name}}
          path: ${{github.workspace}}/build/${{env.PVS_LOG}}
          retention-days: 7

  Upload:
    needs: BuildAndAnalyze
    runs-on: 'ubuntu-latest'
    env:
      PREFIX_ARTIFACTS_NAME: 'StaticAnalysis'
      CONVERTER:             'plog-converter'
    steps:
      - name: Upload artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '${{env.PREFIX_ARTIFACTS_NAME}}_*'
          path: '${{github.workspace}}/Merge'
 
      - name: initialize
        shell: bash 
        run: |
             wget -qO- https://cdn.pvs-studio.com/etc/pubkey.txt | \
             sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/viva64.gpg
             sudo wget -O /etc/apt/sources.list.d/viva64.list \
             https://cdn.pvs-studio.com/etc/viva64.list
             sudo apt-get update
             sudo apt-get install pvs-studio 
   
# Merge and convert static analysis reports             
      - name: Merge Analysis Result
        shell: bash
        env:
          LOG_WIN: ' ${{github.workspace}}/Merge/${{env.PREFIX_ARTIFACTS_NAME}}_Windows/${{env.PVS_LOG}}'
          LOG_LINUX: ' ${{github.workspace}}/Merge/${{env.PREFIX_ARTIFACTS_NAME}}_Linux/${{env.PVS_LOG}}'
          LOG_MACOS: ' ${{github.workspace}}/Merge/${{env.PREFIX_ARTIFACTS_NAME}}_macOS/${{env.PVS_LOG}}'
        run: "\"${{env.CONVERTER}}\" -t \"sarif\" -a \"all\" -w -r \"${{github.workspace}}\" -o \"${{env.PVS_SARIF}}\" ${{env.LOG_WIN}} ${{env.LOG_LINUX}} ${{env.LOG_MACOS}}"
        working-directory: "${{github.workspace}}/Merge"

        # Upload analysis result to GitHub.
      - name: Publish static analysis report
        if: '!cancelled()'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{github.workspace}}/Merge/${{env.PVS_SARIF}}"
          category: "PVS-Studio"


     


